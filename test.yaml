pipeline:
  name: IACM Setup Pipeline
  identifier: iacm_setup_pipeline
  projectIdentifier: <+project.identifier>
  orgIdentifier: <+account.identifier>
  tags: {}
  stages:
    - stage:
        name: Create GitHub Repository
        identifier: create_github_repo
        description: Creates a new GitHub repository
        type: Custom
        spec:
          execution:
            steps:
              - step:
                  type: ShellScript
                  name: Create GitHub Repo
                  identifier: create_github_repo_step
                  spec:
                    shell: Bash
                    onDelegate: true
                    source:
                      type: Inline
                      spec:
                        script: |
                          #!/bin/bash
                          set -e
                          
                          # GitHub API endpoint
                          GITHUB_API="https://api.github.com"
                          REPO_NAME="<+pipeline.variables.repo_name>"
                          GITHUB_ORG="<+pipeline.variables.github_org>"
                          GITHUB_TOKEN="<+secrets.getValue('github_token')>"
                          BRANCH_NAME="scaffolding-pipeline"
                          
                          echo "Creating GitHub repository: $REPO_NAME"
                          
                          # Create repository
                          response=$(curl -X POST \
                            -H "Authorization: token $GITHUB_TOKEN" \
                            -H "Accept: application/vnd.github.v3+json" \
                            "$GITHUB_API/orgs/$GITHUB_ORG/repos" \
                            -d "{
                              \"name\": \"$REPO_NAME\",
                              \"description\": \"IACM managed infrastructure repository\",
                              \"private\": true,
                              \"auto_init\": true
                            }")
                          
                          echo "Response: $response"
                          
                          # Extract repository URL and default branch SHA
                          REPO_URL=$(echo $response | jq -r '.clone_url')
                          REPO_FULL_NAME=$(echo $response | jq -r '.full_name')
                          echo "Repository created: $REPO_URL"
                          
                          # Wait for repository initialization
                          sleep 3
                          
                          # Get the SHA of the default branch (main)
                          default_branch_response=$(curl -s \
                            -H "Authorization: token $GITHUB_TOKEN" \
                            -H "Accept: application/vnd.github.v3+json" \
                            "$GITHUB_API/repos/$REPO_FULL_NAME/git/ref/heads/main")
                          
                          DEFAULT_SHA=$(echo $default_branch_response | jq -r '.object.sha')
                          echo "Default branch SHA: $DEFAULT_SHA"
                          
                          # Create scaffolding-pipeline branch
                          echo "Creating branch: $BRANCH_NAME"
                          branch_response=$(curl -X POST \
                            -H "Authorization: token $GITHUB_TOKEN" \
                            -H "Accept: application/vnd.github.v3+json" \
                            "$GITHUB_API/repos/$REPO_FULL_NAME/git/refs" \
                            -d "{
                              \"ref\": \"refs/heads/$BRANCH_NAME\",
                              \"sha\": \"$DEFAULT_SHA\"
                            }")
                          
                          echo "Branch creation response: $branch_response"
                          
                          # Create README.md with repository properties
                          echo "Creating README.md file"
                          README_CONTENT=$(cat <<EOF
                          # $REPO_NAME
                          
                          ## Repository Properties
                          
                          - **scaffolded_repo_name**: $REPO_NAME
                          - **branch**: $BRANCH_NAME
                          - **type**: IACM Infrastructure Repository
                          - **managed_by**: Harness IACM
                          
                          ## Description
                          
                          This repository contains Infrastructure as Code (IaC) managed by Harness IACM.
                          The scaffolding pipeline uses this repository to provision and manage cloud infrastructure.
                          
                          ## Structure
                          
                          \`\`\`
                          .
                          ├── terraform/           # Terraform configuration files
                          │   ├── main.tf
                          │   ├── variables.tf
                          │   └── outputs.tf
                          ├── IACM_template.yaml   # IACM pipeline template
                          └── README.md            # This file
                          \`\`\`
                          
                          ## IACM Pipeline Template
                          
                          The \`IACM_template.yaml\` file contains the Harness IACM pipeline definition that will be used
                          to create and manage the infrastructure pipeline. This template should include:
                          - Terraform init, plan, and apply steps
                          - Workspace configuration
                          - Environment variables
                          - Approval gates (if needed)
                          
                          ## Triggers
                          
                          This repository is configured with multiple triggers:
                          - **Commit Trigger**: Runs on commits to $BRANCH_NAME branch with .tf file changes
                          - **PR Trigger**: Runs Terraform plan on PR open/update
                          - **PR Merge Trigger**: Runs full apply when PR is merged
                          - **Scheduled Trigger**: Daily drift detection at 2 AM
                          
                          ## Getting Started
                          
                          1. Ensure \`IACM_template.yaml\` exists in the repository root
                          2. Add your Terraform configurations to the \`terraform/\` directory
                          3. Commit changes to trigger the pipeline
                          4. Review and approve infrastructure changes through Harness UI
                          
                          This repository is automatically managed by Harness IACM workspace.
                          Changes to the infrastructure should be made through the Harness pipeline.
                          EOF
                          )
                          
                          # Base64 encode the README content
                          README_BASE64=$(echo "$README_CONTENT" | base64 -w 0)
                          
                          # Create/Update README.md in scaffolding-pipeline branch
                          readme_response=$(curl -X PUT \
                            -H "Authorization: token $GITHUB_TOKEN" \
                            -H "Accept: application/vnd.github.v3+json" \
                            "$GITHUB_API/repos/$REPO_FULL_NAME/contents/README.md" \
                            -d "{
                              \"message\": \"Add README with repository properties\",
                              \"content\": \"$README_BASE64\",
                              \"branch\": \"$BRANCH_NAME\"
                            }")
                          
                          echo "README creation response: $readme_response"
                          echo "Branch $BRANCH_NAME created with README.md"
                          
                          # Export for next stages
                          export REPO_URL
                          export BRANCH_NAME
                    environmentVariables: []
                    outputVariables:
                      - name: REPO_URL
                        type: String
                        value: REPO_URL
                      - name: BRANCH_NAME
                        type: String
                        value: BRANCH_NAME
                  timeout: 5m
              
              - step:
                  type: ShellScript
                  name: Create IACM Template File
                  identifier: create_iacm_template
                  spec:
                    shell: Bash
                    onDelegate: true
                    source:
                      type: Inline
                      spec:
                        script: |
                          #!/bin/bash
                          set -e
                          
                          GITHUB_API="https://api.github.com"
                          GITHUB_TOKEN="<+secrets.getValue('github_token')>"
                          GITHUB_ORG="<+pipeline.variables.github_org>"
                          REPO_NAME="<+pipeline.variables.repo_name>"
                          BRANCH_NAME="scaffolding-pipeline"
                          REPO_FULL_NAME="$GITHUB_ORG/$REPO_NAME"
                          
                          echo "Creating IACM_template.yaml file in repository"
                          
                          # Create default IACM template
                          TEMPLATE_CONTENT=$(cat <<'TEMPLATE_EOF'
                          pipeline:
                            name: ${PIPELINE_NAME}
                            identifier: ${PIPELINE_ID}
                            projectIdentifier: ${HARNESS_PROJECT_ID}
                            orgIdentifier: ${HARNESS_ORG_ID}
                            tags:
                              iacm: "true"
                              terraform: "true"
                            stages:
                              - stage:
                                  name: IACM Provision
                                  identifier: iacm_provision
                                  description: Terraform provisioning with IACM
                                  type: IACM
                                  spec:
                                    workspace: <+pipeline.variables.workspace_name>
                                    execution:
                                      steps:
                                        - step:
                                            type: IACMTerraformPlugin
                                            name: Init
                                            identifier: init
                                            description: Initialize Terraform
                                            spec:
                                              command: init
                                        - step:
                                            type: IACMTerraformPlugin
                                            name: Validate
                                            identifier: validate
                                            description: Validate Terraform configuration
                                            spec:
                                              command: validate
                                        - step:
                                            type: IACMTerraformPlugin
                                            name: Plan
                                            identifier: plan
                                            description: Generate Terraform plan
                                            spec:
                                              command: plan
                                        - step:
                                            type: Approval
                                            name: Approve Apply
                                            identifier: approve_apply
                                            spec:
                                              approvalMessage: Please review the Terraform plan and approve to apply changes
                                              includePipelineExecutionHistory: true
                                              approvers:
                                                minimumCount: 1
                                                disallowPipelineExecutor: false
                                                userGroups:
                                                  - account._account_all_users
                                              approverInputs: []
                                            timeout: 1d
                                            when:
                                              stageStatus: Success
                                        - step:
                                            type: IACMTerraformPlugin
                                            name: Apply
                                            identifier: apply
                                            description: Apply Terraform changes
                                            spec:
                                              command: apply
                                    platform:
                                      os: Linux
                                      arch: Amd64
                                    runtime:
                                      type: Cloud
                                      spec: {}
                            variables:
                              - name: workspace_name
                                type: String
                                description: IACM workspace name
                                required: true
                                value: <+input>
                          TEMPLATE_EOF
                          )
                          
                          # Base64 encode the template content
                          TEMPLATE_BASE64=$(echo "$TEMPLATE_CONTENT" | base64 -w 0)
                          
                          # Create IACM_template.yaml in scaffolding-pipeline branch
                          template_response=$(curl -X PUT \
                            -H "Authorization: token $GITHUB_TOKEN" \
                            -H "Accept: application/vnd.github.v3+json" \
                            "$GITHUB_API/repos/$REPO_FULL_NAME/contents/IACM_template.yaml" \
                            -d "{
                              \"message\": \"Add IACM pipeline template\",
                              \"content\": \"$TEMPLATE_BASE64\",
                              \"branch\": \"$BRANCH_NAME\"
                            }")
                          
                          echo "Template creation response: $template_response"
                          echo "IACM_template.yaml created successfully"
                    environmentVariables: []
                    outputVariables: []
                  timeout: 5m
    
    - stage:
        name: Create IACM Pipeline
        identifier: create_iacm_pipeline
        description: Creates IACM pipeline using Harness API
        type: Custom
        spec:
          execution:
            steps:
              - step:
                  type: ShellScript
                  name: Create IACM Pipeline
                  identifier: create_iacm_pipeline_step
                  spec:
                    shell: Bash
                    onDelegate: true
                    source:
                      type: Inline
                      spec:
                        script: |
                          #!/bin/bash
                          set -e
                          
                          HARNESS_ACCOUNT_ID="<+account.identifier>"
                          HARNESS_ORG_ID="<+org.identifier>"
                          HARNESS_PROJECT_ID="<+project.identifier>"
                          HARNESS_API_KEY="<+secrets.getValue('harness_api_key')>"
                          HARNESS_PLATFORM_URL="https://app.harness.io"
                          
                          PIPELINE_NAME="<+pipeline.variables.iacm_pipeline_name>"
                          PIPELINE_ID="<+pipeline.variables.iacm_pipeline_id>"
                          TEMPLATE_PATH="<+pipeline.variables.template_path>"
                          REPO_URL="<+pipeline.stages.create_github_repo.spec.execution.steps.create_github_repo_step.output.outputVariables.REPO_URL>"
                          BRANCH_NAME="<+pipeline.stages.create_github_repo.spec.execution.steps.create_github_repo_step.output.outputVariables.BRANCH_NAME>"
                          GITHUB_TOKEN="<+secrets.getValue('github_token')>"
                          GITHUB_ORG="<+pipeline.variables.github_org>"
                          REPO_NAME="<+pipeline.variables.repo_name>"
                          
                          echo "Creating IACM Pipeline: $PIPELINE_NAME"
                          echo "Reading template from: $TEMPLATE_PATH"
                          
                          # Download IACM_template.yaml from the repository
                          GITHUB_API="https://api.github.com"
                          REPO_FULL_NAME="$GITHUB_ORG/$REPO_NAME"
                          
                          # Fetch the template file from GitHub
                          template_response=$(curl -s \
                            -H "Authorization: token $GITHUB_TOKEN" \
                            -H "Accept: application/vnd.github.v3.raw" \
                            "$GITHUB_API/repos/$REPO_FULL_NAME/contents/$TEMPLATE_PATH?ref=$BRANCH_NAME")
                          
                          # Save the template
                          echo "$template_response" > iacm_pipeline_template.yaml
                          
                          echo "Template content:"
                          cat iacm_pipeline_template.yaml
                          
                          # Substitute variables in template
                          export PIPELINE_NAME
                          export PIPELINE_ID
                          export HARNESS_PROJECT_ID
                          export HARNESS_ORG_ID
                          
                          envsubst < iacm_pipeline_template.yaml > iacm_pipeline_final.yaml
                          
                          echo "Final pipeline YAML:"
                          cat iacm_pipeline_final.yaml
                          
                          # Create pipeline via Harness API
                          response=$(curl -X POST \
                            "${HARNESS_PLATFORM_URL}/gateway/pipeline/api/pipelines/v2" \
                            -H "x-api-key: $HARNESS_API_KEY" \
                            -H "Content-Type: application/yaml" \
                            -H "Harness-Account: $HARNESS_ACCOUNT_ID" \
                            --data-binary @iacm_pipeline_final.yaml)
                          
                          echo "Pipeline creation response: $response"
                          
                          # Export pipeline identifier
                          export IACM_PIPELINE_ID="$PIPELINE_ID"
                    environmentVariables: []
                    outputVariables:
                      - name: IACM_PIPELINE_ID
                        type: String
                        value: IACM_PIPELINE_ID
                  timeout: 5m
    
    - stage:
        name: Add Pipeline Triggers
        identifier: add_pipeline_triggers
        description: Adds triggers to the IACM pipeline
        type: Custom
        spec:
          execution:
            steps:
              - step:
                  type: ShellScript
                  name: Create Webhook Trigger
                  identifier: create_webhook_trigger
                  spec:
                    shell: Bash
                    onDelegate: true
                    source:
                      type: Inline
                      spec:
                        script: |
                          #!/bin/bash
                          set -e
                          
                          HARNESS_ACCOUNT_ID="<+account.identifier>"
                          HARNESS_ORG_ID="<+org.identifier>"
                          HARNESS_PROJECT_ID="<+project.identifier>"
                          HARNESS_API_KEY="<+secrets.getValue('harness_api_key')>"
                          HARNESS_PLATFORM_URL="https://app.harness.io"
                          
                          PIPELINE_ID="<+pipeline.stages.create_iacm_pipeline.spec.execution.steps.create_iacm_pipeline_step.output.outputVariables.IACM_PIPELINE_ID>"
                          REPO_NAME="<+pipeline.variables.repo_name>"
                          
                          echo "Creating webhook trigger for pipeline: $PIPELINE_ID"
                          
                          # Create webhook trigger for scaffolding-pipeline branch
                          cat > trigger.json << EOF
                          {
                            "name": "GitHub Push Trigger",
                            "identifier": "github_push_trigger",
                            "enabled": true,
                            "description": "Trigger on push to scaffolding-pipeline branch",
                            "type": "Webhook",
                            "spec": {
                              "type": "Github",
                              "spec": {
                                "type": "Push",
                                "spec": {
                                  "connectorRef": "<+pipeline.variables.github_connector>",
                                  "autoAbortPreviousExecutions": false,
                                  "payloadConditions": [
                                    {
                                      "key": "targetBranch",
                                      "operator": "Equals",
                                      "value": "scaffolding-pipeline"
                                    }
                                  ],
                                  "headerConditions": [],
                                  "repoName": "$REPO_NAME",
                                  "actions": []
                                }
                              }
                            },
                            "inputYaml": "pipeline:\n  identifier: $PIPELINE_ID\n  stages:\n    - stage:\n        identifier: iacm_provision\n        type: IACM"
                          }
                          EOF
                          
                          # Create trigger via API
                          response=$(curl -X POST \
                            "${HARNESS_PLATFORM_URL}/gateway/pipeline/api/triggers" \
                            -H "x-api-key: $HARNESS_API_KEY" \
                            -H "Content-Type: application/json" \
                            -H "Harness-Account: $HARNESS_ACCOUNT_ID" \
                            -d @trigger.json \
                            --get \
                            --data-urlencode "accountIdentifier=$HARNESS_ACCOUNT_ID" \
                            --data-urlencode "orgIdentifier=$HARNESS_ORG_ID" \
                            --data-urlencode "projectIdentifier=$HARNESS_PROJECT_ID" \
                            --data-urlencode "targetIdentifier=$PIPELINE_ID" \
                            --data-urlencode "pipelineIdentifier=$PIPELINE_ID")
                          
                          echo "Trigger creation response: $response"
                    environmentVariables: []
                    outputVariables: []
                  timeout: 5m
              
              - step:
                  type: ShellScript
                  name: Create Commit Trigger
                  identifier: create_commit_trigger
                  spec:
                    shell: Bash
                    onDelegate: true
                    source:
                      type: Inline
                      spec:
                        script: |
                          #!/bin/bash
                          set -e
                          
                          HARNESS_ACCOUNT_ID="<+account.identifier>"
                          HARNESS_ORG_ID="<+org.identifier>"
                          HARNESS_PROJECT_ID="<+project.identifier>"
                          HARNESS_API_KEY="<+secrets.getValue('harness_api_key')>"
                          HARNESS_PLATFORM_URL="https://app.harness.io"
                          
                          PIPELINE_ID="<+pipeline.stages.create_iacm_pipeline.spec.execution.steps.create_iacm_pipeline_step.output.outputVariables.IACM_PIPELINE_ID>"
                          REPO_NAME="<+pipeline.variables.repo_name>"
                          
                          echo "Creating commit trigger for pipeline: $PIPELINE_ID"
                          
                          # Create commit trigger
                          cat > commit_trigger.json << EOF
                          {
                            "name": "Commit Trigger",
                            "identifier": "commit_trigger",
                            "enabled": true,
                            "description": "Trigger on any commit to scaffolding-pipeline branch",
                            "type": "Webhook",
                            "spec": {
                              "type": "Github",
                              "spec": {
                                "type": "Push",
                                "spec": {
                                  "connectorRef": "<+pipeline.variables.github_connector>",
                                  "autoAbortPreviousExecutions": true,
                                  "payloadConditions": [
                                    {
                                      "key": "targetBranch",
                                      "operator": "Equals",
                                      "value": "scaffolding-pipeline"
                                    },
                                    {
                                      "key": "changedFiles",
                                      "operator": "Contains",
                                      "value": ".tf"
                                    }
                                  ],
                                  "headerConditions": [],
                                  "repoName": "$REPO_NAME",
                                  "actions": []
                                }
                              }
                            },
                            "inputYaml": "pipeline:\n  identifier: $PIPELINE_ID\n  stages:\n    - stage:\n        identifier: iacm_provision\n        type: IACM"
                          }
                          EOF
                          
                          # Create trigger via API
                          response=$(curl -X POST \
                            "${HARNESS_PLATFORM_URL}/gateway/pipeline/api/triggers" \
                            -H "x-api-key: $HARNESS_API_KEY" \
                            -H "Content-Type: application/json" \
                            -H "Harness-Account: $HARNESS_ACCOUNT_ID" \
                            -d @commit_trigger.json \
                            --get \
                            --data-urlencode "accountIdentifier=$HARNESS_ACCOUNT_ID" \
                            --data-urlencode "orgIdentifier=$HARNESS_ORG_ID" \
                            --data-urlencode "projectIdentifier=$HARNESS_PROJECT_ID" \
                            --data-urlencode "targetIdentifier=$PIPELINE_ID" \
                            --data-urlencode "pipelineIdentifier=$PIPELINE_ID")
                          
                          echo "Commit trigger creation response: $response"
                    environmentVariables: []
                    outputVariables: []
                  timeout: 5m
              
              - step:
                  type: ShellScript
                  name: Create PR Trigger
                  identifier: create_pr_trigger
                  spec:
                    shell: Bash
                    onDelegate: true
                    source:
                      type: Inline
                      spec:
                        script: |
                          #!/bin/bash
                          set -e
                          
                          HARNESS_ACCOUNT_ID="<+account.identifier>"
                          HARNESS_ORG_ID="<+org.identifier>"
                          HARNESS_PROJECT_ID="<+project.identifier>"
                          HARNESS_API_KEY="<+secrets.getValue('harness_api_key')>"
                          HARNESS_PLATFORM_URL="https://app.harness.io"
                          
                          PIPELINE_ID="<+pipeline.stages.create_iacm_pipeline.spec.execution.steps.create_iacm_pipeline_step.output.outputVariables.IACM_PIPELINE_ID>"
                          REPO_NAME="<+pipeline.variables.repo_name>"
                          
                          echo "Creating PR trigger for pipeline: $PIPELINE_ID"
                          
                          # Create PR trigger (opened and synchronized)
                          cat > pr_trigger.json << EOF
                          {
                            "name": "Pull Request Trigger",
                            "identifier": "pr_trigger",
                            "enabled": true,
                            "description": "Trigger on PR opened or updated",
                            "type": "Webhook",
                            "spec": {
                              "type": "Github",
                              "spec": {
                                "type": "PullRequest",
                                "spec": {
                                  "connectorRef": "<+pipeline.variables.github_connector>",
                                  "autoAbortPreviousExecutions": true,
                                  "payloadConditions": [
                                    {
                                      "key": "targetBranch",
                                      "operator": "Equals",
                                      "value": "scaffolding-pipeline"
                                    }
                                  ],
                                  "headerConditions": [],
                                  "repoName": "$REPO_NAME",
                                  "actions": ["opened", "reopened", "synchronize"]
                                }
                              }
                            },
                            "inputYaml": "pipeline:\n  identifier: $PIPELINE_ID\n  stages:\n    - stage:\n        identifier: iacm_provision\n        type: IACM\n        spec:\n          execution:\n            steps:\n              - step:\n                  identifier: plan\n                  type: IACMTerraformPlugin\n                  spec:\n                    command: plan"
                          }
                          EOF
                          
                          # Create trigger via API
                          response=$(curl -X POST \
                            "${HARNESS_PLATFORM_URL}/gateway/pipeline/api/triggers" \
                            -H "x-api-key: $HARNESS_API_KEY" \
                            -H "Content-Type: application/json" \
                            -H "Harness-Account: $HARNESS_ACCOUNT_ID" \
                            -d @pr_trigger.json \
                            --get \
                            --data-urlencode "accountIdentifier=$HARNESS_ACCOUNT_ID" \
                            --data-urlencode "orgIdentifier=$HARNESS_ORG_ID" \
                            --data-urlencode "projectIdentifier=$HARNESS_PROJECT_ID" \
                            --data-urlencode "targetIdentifier=$PIPELINE_ID" \
                            --data-urlencode "pipelineIdentifier=$PIPELINE_ID")
                          
                          echo "PR trigger creation response: $response"
                    environmentVariables: []
                    outputVariables: []
                  timeout: 5m
              
              - step:
                  type: ShellScript
                  name: Create PR Merge Trigger
                  identifier: create_pr_merge_trigger
                  spec:
                    shell: Bash
                    onDelegate: true
                    source:
                      type: Inline
                      spec:
                        script: |
                          #!/bin/bash
                          set -e
                          
                          HARNESS_ACCOUNT_ID="<+account.identifier>"
                          HARNESS_ORG_ID="<+org.identifier>"
                          HARNESS_PROJECT_ID="<+project.identifier>"
                          HARNESS_API_KEY="<+secrets.getValue('harness_api_key')>"
                          HARNESS_PLATFORM_URL="https://app.harness.io"
                          
                          PIPELINE_ID="<+pipeline.stages.create_iacm_pipeline.spec.execution.steps.create_iacm_pipeline_step.output.outputVariables.IACM_PIPELINE_ID>"
                          REPO_NAME="<+pipeline.variables.repo_name>"
                          
                          echo "Creating PR merge trigger for pipeline: $PIPELINE_ID"
                          
                          # Create PR merge trigger (closed with merged=true)
                          cat > pr_merge_trigger.json << EOF
                          {
                            "name": "PR Merge Trigger",
                            "identifier": "pr_merge_trigger",
                            "enabled": true,
                            "description": "Trigger on PR merge to scaffolding-pipeline branch",
                            "type": "Webhook",
                            "spec": {
                              "type": "Github",
                              "spec": {
                                "type": "PullRequest",
                                "spec": {
                                  "connectorRef": "<+pipeline.variables.github_connector>",
                                  "autoAbortPreviousExecutions": false,
                                  "payloadConditions": [
                                    {
                                      "key": "targetBranch",
                                      "operator": "Equals",
                                      "value": "scaffolding-pipeline"
                                    },
                                    {
                                      "key": "state",
                                      "operator": "Equals",
                                      "value": "closed"
                                    },
                                    {
                                      "key": "merged",
                                      "operator": "Equals",
                                      "value": "true"
                                    }
                                  ],
                                  "headerConditions": [],
                                  "repoName": "$REPO_NAME",
                                  "actions": ["closed"]
                                }
                              }
                            },
                            "inputYaml": "pipeline:\n  identifier: $PIPELINE_ID\n  stages:\n    - stage:\n        identifier: iacm_provision\n        type: IACM"
                          }
                          EOF
                          
                          # Create trigger via API
                          response=$(curl -X POST \
                            "${HARNESS_PLATFORM_URL}/gateway/pipeline/api/triggers" \
                            -H "x-api-key: $HARNESS_API_KEY" \
                            -H "Content-Type: application/json" \
                            -H "Harness-Account: $HARNESS_ACCOUNT_ID" \
                            -d @pr_merge_trigger.json \
                            --get \
                            --data-urlencode "accountIdentifier=$HARNESS_ACCOUNT_ID" \
                            --data-urlencode "orgIdentifier=$HARNESS_ORG_ID" \
                            --data-urlencode "projectIdentifier=$HARNESS_PROJECT_ID" \
                            --data-urlencode "targetIdentifier=$PIPELINE_ID" \
                            --data-urlencode "pipelineIdentifier=$PIPELINE_ID")
                          
                          echo "PR merge trigger creation response: $response"
                    environmentVariables: []
                    outputVariables: []
                  timeout: 5m
              
              - step:
                  type: ShellScript
                  name: Create Scheduled Trigger
                  identifier: create_scheduled_trigger
                  spec:
                    shell: Bash
                    onDelegate: true
                    source:
                      type: Inline
                      spec:
                        script: |
                          #!/bin/bash
                          set -e
                          
                          HARNESS_ACCOUNT_ID="<+account.identifier>"
                          HARNESS_ORG_ID="<+org.identifier>"
                          HARNESS_PROJECT_ID="<+project.identifier>"
                          HARNESS_API_KEY="<+secrets.getValue('harness_api_key')>"
                          HARNESS_PLATFORM_URL="https://app.harness.io"
                          
                          PIPELINE_ID="<+pipeline.stages.create_iacm_pipeline.spec.execution.steps.create_iacm_pipeline_step.output.outputVariables.IACM_PIPELINE_ID>"
                          
                          echo "Creating scheduled trigger for pipeline: $PIPELINE_ID"
                          
                          # Create scheduled trigger (daily at 2 AM)
                          cat > scheduled_trigger.json << EOF
                          {
                            "name": "Daily Drift Detection",
                            "identifier": "daily_drift_detection",
                            "enabled": true,
                            "description": "Daily drift detection run",
                            "type": "Scheduled",
                            "spec": {
                              "type": "Cron",
                              "spec": {
                                "expression": "0 2 * * *"
                              }
                            }
                          }
                          EOF
                          
                          # Create trigger via API
                          response=$(curl -X POST \
                            "${HARNESS_PLATFORM_URL}/gateway/pipeline/api/triggers" \
                            -H "x-api-key: $HARNESS_API_KEY" \
                            -H "Content-Type: application/json" \
                            -H "Harness-Account: $HARNESS_ACCOUNT_ID" \
                            -d @scheduled_trigger.json \
                            --get \
                            --data-urlencode "accountIdentifier=$HARNESS_ACCOUNT_ID" \
                            --data-urlencode "orgIdentifier=$HARNESS_ORG_ID" \
                            --data-urlencode "projectIdentifier=$HARNESS_PROJECT_ID" \
                            --data-urlencode "targetIdentifier=$PIPELINE_ID" \
                            --data-urlencode "pipelineIdentifier=$PIPELINE_ID")
                          
                          echo "Scheduled trigger creation response: $response"
                    environmentVariables: []
                    outputVariables: []
                  timeout: 5m
    
    - stage:
        name: Create IACM Workspace
        identifier: create_iacm_workspace
        description: Creates IACM workspace
        type: Custom
        spec:
          execution:
            steps:
              - step:
                  type: ShellScript
                  name: Create Workspace
                  identifier: create_workspace_step
                  spec:
                    shell: Bash
                    onDelegate: true
                    source:
                      type: Inline
                      spec:
                        script: |
                          #!/bin/bash
                          set -e
                          
                          HARNESS_ACCOUNT_ID="<+account.identifier>"
                          HARNESS_ORG_ID="<+org.identifier>"
                          HARNESS_PROJECT_ID="<+project.identifier>"
                          HARNESS_API_KEY="<+secrets.getValue('harness_api_key')>"
                          HARNESS_PLATFORM_URL="https://app.harness.io"
                          
                          WORKSPACE_NAME="<+pipeline.variables.workspace_name>"
                          WORKSPACE_ID="<+pipeline.variables.workspace_id>"
                          REPO_URL="<+pipeline.stages.create_github_repo.spec.execution.steps.create_github_repo_step.output.outputVariables.REPO_URL>"
                          BRANCH_NAME="<+pipeline.stages.create_github_repo.spec.execution.steps.create_github_repo_step.output.outputVariables.BRANCH_NAME>"
                          
                          echo "Creating IACM Workspace: $WORKSPACE_NAME"
                          
                          # Create workspace payload
                          cat > workspace.json << EOF
                          {
                            "name": "$WORKSPACE_NAME",
                            "identifier": "$WORKSPACE_ID",
                            "org_identifier": "$HARNESS_ORG_ID",
                            "project_identifier": "$HARNESS_PROJECT_ID",
                            "description": "IACM Workspace for infrastructure management",
                            "provider_connector": "<+pipeline.variables.provider_connector>",
                            "provisioner": "terraform",
                            "provisioner_version": "1.5.7",
                            "repository": "$REPO_URL",
                            "repository_branch": "$BRANCH_NAME",
                            "repository_path": "terraform/",
                            "repository_connector": "<+pipeline.variables.github_connector>",
                            "cost_estimation_enabled": true,
                            "provider": "aws",
                            "environment_variables": [
                              {
                                "key": "TF_LOG",
                                "value": "INFO",
                                "value_type": "string"
                              }
                            ],
                            "terraform_variables": []
                          }
                          EOF
                          
                          # Create workspace via Harness IACM API
                          response=$(curl -X POST \
                            "${HARNESS_PLATFORM_URL}/iacm/api/orgs/$HARNESS_ORG_ID/projects/$HARNESS_PROJECT_ID/workspaces" \
                            -H "x-api-key: $HARNESS_API_KEY" \
                            -H "Content-Type: application/json" \
                            -H "Harness-Account: $HARNESS_ACCOUNT_ID" \
                            -d @workspace.json)
                          
                          echo "Workspace creation response: $response"
                          
                          workspace_id=$(echo $response | jq -r '.identifier')
                          echo "Workspace created with ID: $workspace_id"
                          
                          export WORKSPACE_ID="$workspace_id"
                    environmentVariables: []
                    outputVariables:
                      - name: WORKSPACE_ID
                        type: String
                        value: WORKSPACE_ID
                  timeout: 5m
              
              - step:
                  type: ShellScript
                  name: Initialize Workspace
                  identifier: initialize_workspace
                  spec:
                    shell: Bash
                    onDelegate: true
                    source:
                      type: Inline
                      spec:
                        script: |
                          #!/bin/bash
                          set -e
                          
                          HARNESS_ACCOUNT_ID="<+account.identifier>"
                          HARNESS_ORG_ID="<+org.identifier>"
                          HARNESS_PROJECT_ID="<+project.identifier>"
                          HARNESS_API_KEY="<+secrets.getValue('harness_api_key')>"
                          HARNESS_PLATFORM_URL="https://app.harness.io"
                          
                          WORKSPACE_ID="<+pipeline.stages.create_iacm_workspace.spec.execution.steps.create_workspace_step.output.outputVariables.WORKSPACE_ID>"
                          
                          echo "Initializing workspace: $WORKSPACE_ID"
                          
                          # Trigger workspace initialization
                          response=$(curl -X POST \
                            "${HARNESS_PLATFORM_URL}/iacm/api/orgs/$HARNESS_ORG_ID/projects/$HARNESS_PROJECT_ID/workspaces/$WORKSPACE_ID/init" \
                            -H "x-api-key: $HARNESS_API_KEY" \
                            -H "Harness-Account: $HARNESS_ACCOUNT_ID")
                          
                          echo "Initialization response: $response"
                          echo "Workspace setup complete!"
                    environmentVariables: []
                    outputVariables: []
                  timeout: 10m
  
  variables:
    - name: repo_name
      type: String
      description: Name of the GitHub repository to create
      required: true
      value: iacm-infrastructure
    
    - name: github_org
      type: String
      description: GitHub organization name
      required: true
      value: ""
    
    - name: template_path
      type: String
      description: Path to IACM pipeline template file in repository
      required: true
      value: IACM_template.yaml
    
    - name: iacm_pipeline_name
      type: String
      description: Name of the IACM pipeline
      required: true
      value: IACM Terraform Pipeline
    
    - name: iacm_pipeline_id
      type: String
      description: Identifier for IACM pipeline
      required: true
      value: iacm_terraform_pipeline
    
    - name: workspace_name
      type: String
      description: Name of the IACM workspace
      required: true
      value: production_workspace
    
    - name: workspace_id
      type: String
      description: Identifier for IACM workspace
      required: true
      value: production_workspace
    
    - name: github_connector
      type: String
      description: Harness GitHub connector reference
      required: true
      value: github_connector
    
    - name: provider_connector
      type: String
      description: Cloud provider connector (e.g., AWS, Azure, GCP)
      required: true
      value: aws_connector
  
  properties:
    ci:
      codebase:
        connectorRef: <+input>
        build: <+input>
